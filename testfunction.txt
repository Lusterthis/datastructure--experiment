
    //testArray();
    //testSingleLinkedList();
    //testDoubleLinkedList();
    // loadData("test.txt");
    
    // cout << "原始数据: " << endl;
    // for (int i=0;i<an_arr.getSize();++i) {
    //     cout <<an_arr[i] << endl;
    // }
    // vector<string> stopWords = {"是", "了", "的", "了","哉","一","app","std::"};
    // cleanData(an_arr.getarr(),stopWords);
    // cout<<"寻找包含关键词的句子"<<endl;
    // auto ans=searchInLL(an_arr.getarr(),"1");
    // for(auto &i:ans){
    //     cout<<i<<endl;
    // }

    //testAVLTree();
 
 
 
 
  cout<<"====knowledge base====" << endl;

    AVLTree<string> knowlegdeBase;//
    knowlegdeBase.insert("Artificial Intelligence");
    knowlegdeBase.insert("Machine Learning");
    knowlegdeBase.insert("Deep Learning");
    knowlegdeBase.insert("Natural Language Processing");
    knowlegdeBase.insert("Computer Vision");
    knowlegdeBase.insert("Reinforcement Learning");
    knowlegdeBase.insert("Speech Recognition");
    knowlegdeBase.insert("Graph Neural Networks");
    knowlegdeBase.insert("Convolutional Neural Networks");
    knowlegdeBase.insert("Recurrent Neural Networks");
    knowlegdeBase.insert("Natural Language Processing");

    knowlegdeBase.inOrderTraversal();//知识库中插入的元素一般默认按照字典序排列,中序遍历默认从小到大输出

    if(knowlegdeBase.find("Artificial Intelligence")){cout<<"Found Artificial Intelligence"<<endl;};

    knowlegdeBase.remove("Artificial Intelligence");
    cout<<"\n\nAfter remove Artificial Intelligence"<<endl;
    knowlegdeBase.inOrderTraversal();


cout<<"====keywordDict====\n";
    AVLTree<string> keywordDict;
    keywordDict.insert("AI");
    keywordDict.insert("ML");
    keywordDict.insert("DL");
    keywordDict.insert("NLP");
    keywordDict.insert("CV");
    keywordDict.insert("RNN");
    keywordDict.insert("CNN");
    keywordDict.insert("GAN");
    keywordDict.insert("VAE");
    keywordDict.insert("GPT");

    keywordDict.inOrderTraversal();
    keywordDict.find("NLP");
    keywordDict.remove("NLP");
    cout<<"after remove NLP\n\n\n";
    keywordDict.inOrderTraversal();